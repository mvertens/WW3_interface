#!/usr/bin/env python3

"""
build ww3 library
"""
import sys, os, shutil

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.build import get_standard_cmake_args
from CIME.case import Case
from CIME.utils import run_cmd, expect
from CIME.utils import safe_copy

logger = logging.getLogger(__name__)

def buildlib(bldroot, libroot, case, compname=None):

    if case.get_value("DEBUG"):
        strdebug = "debug"
    else:
        strdebug = "nodebug"
    if case.get_value("BUILD_THREADED"):
        strthread = "threads"
    else:
        strthread = "nothreads"
    mpilib = case.get_value("MPILIB")
    exe_root = case.get_value("EXEROOT")
    srcpath = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, "WW3", "model", "src"))

    srcroot = case.get_value("SRCROOT")

    # Determine cmake flags
    use_unstruct = case.get_value("WW3_UNSTRUCT")
    sharedpath = os.path.join(case.get_value("COMPILER"), mpilib, strdebug, strthread, "nuopc")
    cmake_flags = get_standard_cmake_args(case, os.path.join(sharedpath))
    # note: base path of install to be completed by setting DESTDIR in make install
    cmake_flags += " -DCMAKE_INSTALL_PREFIX:PATH=/"
    cmake_flags += " -DLIBROOT={} ".format(libroot)
    cmake_flags += " -DMPILIB={} ".format(mpilib)
    cmake_flags += " -DSRCROOT={} ".format(srcroot)

    use_unstruct = case.get_value("WW3_UNSTRUCT")
    if use_unstruct:
        cmake_flags += " -DUSE_UNSTRUCT=on "

    waveprop = case.get_value("WW3_WAVEPROP")
    if waveprop == 'PR3':
        cmake_flags += " -DUSE_PR3=on "
    elif waveprop == 'PR1':
        cmake_flags += " -DUSE_PR1=on "
    else:
        expect(False,"ERROR only wave propagation type PR3 and PR1 are supported currently")
    cmake_flags += srcpath

    # run cmake
    logger.info("Running cmake for WW3")
    logger.info("wav sharedpath is {}".format(sharedpath))
    logger.info("wav cmake_flags are {}".format(cmake_flags))
    logger.info("wav srcpath is {}".format(srcpath))
    logger.info("wav bldroot is {}".format(bldroot))
    logger.info("wav libroot is {}".format(libroot))
    logger.info("cmake_flags {}".format(cmake_flags))
    s,o,e = run_cmd("cmake {} ".format(cmake_flags), from_dir=bldroot, verbose=True)
    expect(not s,"ERROR from cmake output={}, error={}".format(o,e))

    # run make
    # Note that cmake will add a lib/ director to the destdir so need to strip this out of libroot
    destdir = os.path.join(libroot, os.pardir)
    logger.info("Running make install for WW3")
    s,o,e = run_cmd("make install VERBOSE=1 DESTDIR={}".format(destdir), from_dir=bldroot, verbose=True)
    expect(not s,"ERROR from make output={}, error={}".format(o,e))

    #----------------------------------------------------
    # Prestage necessary files to rundir
    #----------------------------------------------------
    rundir = case.get_value("RUNDIR")

    # Create rundir/ww3_moddef_create
    filename = "ww3_grid"
    item = os.path.join(bldroot, filename)
    if os.path.isfile(item):
        ww3_moddef_dir = os.path.join(rundir, "ww3_moddef_create")
        if not os.path.exists(ww3_moddef_dir):
            os.makedirs(ww3_moddef_dir)
        safe_copy(item, ww3_moddef_dir)

    if case.get_value("WW3_MODDEF") == 'unset':
        # Create output dir ww3_moddef_create if appropriate
        output_dir = os.path.join(rundir, "ww3_moddef_create")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # Copy ww3_inp and other needed info to ww3_moddef_create directory
        input_dir = case.get_value("WW3_GRID_INP_DIR")
        files = os.listdir(input_dir)
        for filename in files:
            if not os.path.isfile(os.path.join(output_dir, filename)):
                shutil.copy(os.path.join(input_dir, filename), os.path.join(output_dir, filename))

        # Create mod_def file using ww3_grid and the grid_input files
        os.chdir(output_dir)
        os.scandir()
        os.system("./ww3_grid > mod_def.ww3.log")

        # Copy mod_def.ww3 to $RUNDIR
        shutil.move("mod_def.ww3", os.path.join(rundir, "mod_def.ww3"))
        shutil.move("mod_def.ww3.log", os.path.join(rundir, "mod_def.ww3.log"))

    else:
        # Use mod_def already created
        mod_def_in = case.get_value("WW3_MODDEF")
        if os.path.isfile(mod_def_in):
            import filecmp
            copy_file = False
            if not os.path.isfile(os.path.join(rundir, "mod_def.ww3")):
                copy_file = True
            elif not filecmp.cmp(mod_def_in, os.path.join(rundir, "mod_def.ww3")):
                copy_file = True
            if copy_file:
                shutil.copy(mod_def_in, os.path.join(rundir, "mod_def.ww3"))
        else:
            raise RuntimeError("mod_def_in {} does not exist on disk".format(mod_def_in))

def _main_func(args):
    caseroot, libroot, bldroot = parse_input(args)
    with Case(caseroot) as case:
        buildlib(bldroot, libroot, case)

if __name__ == "__main__":
    _main_func(sys.argv)
